


// Version del perceptron para arduino IDE


int a0, a1, a2, a3, b0, b1, b2, b3, c0, c1, c2, c3;
int new_c0, new_c1, new_c2, new_c3;
int input1 = 0;
int input2=0;
int execute = 0;
using namespace std;



void setup() {


Serial.begin(9600);

}
void loop() {


class Neurona
{
private:
  float bios;
  float peso_1;
  float peso_2;

public:
  void setbios(float bios)
  {
    this->bios = bios;
  }
  void setPeso_1(float peso_1)
  {
    this->peso_1 = peso_1;
  }
  void setPeso_2(float peso_2)
  {
    this->peso_2 = peso_2;
  }
  float getbios()
  {
    return bios;
  }
  float getPeso_1()
  {
    return peso_1;
  }
  float getPeso_2()
  {
    return peso_2;
  }
  int sigmoide(float valor)
  {
    if (valor > 0)
      return 1;
    else
      return 0;
  }
  float neurona(float entrada_1, float entrada_2)
  {
    return (bios + (entrada_1 * peso_1) + (entrada_2 * peso_2));
  }
  float salida(float entrada_1, float entrada_2)
  {
    return sigmoide(neurona(entrada_1, entrada_2));
  }
};




  while (1) { //INFINITE WHILE

    //if (learning = 1) {


Serial.println("ENTER LUT   A  B | X     2-IN 1-OUT GATE (AND,OR,XOR,ETC;) \n");


    printf("ENTER LUT   A  B | X     2-IN 1-OUT GATE (AND,OR,XOR,ETC;) \n");

    scanf("%d", &a0);
    scanf("%d", &b0);
    scanf("%d", &c0);

    scanf("%d", &a1);
    scanf("%d", &b1);
    scanf("%d", &c1);

    scanf("%d", &a2);
    scanf("%d", &b2);
    scanf("%d", &c2);

    scanf("%d", &a3);
    scanf("%d", &b3);
    scanf("%d", &c3);

    printf("\n");

    printf("LUT Introduced \n %d %d %d \n %d %d %d\n %d %d %d\n %d %d %d ", a0, b0, c0, a1, b1, c1, a2, b2, c2, a3, b3, c3);

    printf("\n");
    printf("\n");





    
    
    
    //srand(time(NULL));
    Neurona neurona;

    float peso_1_anterior = 0;
    float peso_2_anterior = 0;
    float bios_anterior = 0;


    int condicion = 1;
    while (condicion)
    {

      condicion = 0;
      if (peso_1_anterior == 0 && peso_2_anterior == 0)
      {
        neurona.setPeso_1(rand() % (10) / 10.0);
        neurona.setPeso_2(rand() % (10) / 10.0);
        neurona.setbios(rand() % (10) / 10.0);
        peso_1_anterior = neurona.getPeso_1();
        peso_2_anterior = neurona.getPeso_2();
        bios_anterior = neurona.getbios();
      }

/*      cout << "peso 1: " << neurona.getPeso_1() << endl;
      cout << "peso 2: " << neurona.getPeso_2() << endl;
      cout << "bios: " << neurona.getbios() << endl;

      cout << "*peso 1: " << peso_1_anterior << endl;
      cout << "*peso 2: " << peso_2_anterior << endl;
      cout << "*bios: " << bios_anterior << endl;


      cout << "Learning in Process" << endl;
      cout << "A:0 B:0 : " << neurona.salida(a0, b0) << endl;
      cout << "A:0 B:1 : " << neurona.salida(a1, b1) << endl;
      cout << "A:1 B:0 : " << neurona.salida(a2, b2) << endl;
      cout << "A:1 B:1 : " << neurona.salida(a3, b3) << endl;

      
    /*
    
      printf("\n");

     printf("A:%d  B:%d  C:%d ", a0,  b0, neurona.salida(a0, b0));
     printf("\n");
     printf("A:%d  B:%d  C:%d", a1,  b1, neurona.salida(a1, b1));
     printf("\n");
       printf("A:%d  B:%d  C:%d", a2,  b2,neurona.salida(a2, b2) );
     printf("\n");
     printf("A:%d  B:%d  C:%d", a3, b3,neurona.salida(a3, b3) );
                
     printf("\n");*/

      new_c0 = neurona.salida(a0, b0);
      new_c1 = neurona.salida(a1, b1);
      new_c2 = neurona.salida(a2, b2);
      new_c3 = neurona.salida(a3, b3);



      peso_1_anterior = neurona.getPeso_1();
      peso_2_anterior = neurona.getPeso_2();
      bios_anterior = neurona.getbios();

      if (neurona.salida(a3, b3) != c3)
      {
        neurona.setPeso_1(peso_1_anterior + 0.2f * (a3 - neurona.salida(a3, b3)) * b3);     // 1  1
        neurona.setPeso_2(peso_2_anterior + 0.2f * (a3 - neurona.salida(a3, b3)) * b3);
        neurona.setbios(bios_anterior + 0.2f * (a3 - neurona.salida(a3, b3)));
        condicion = 1;
      }
      if (neurona.salida(a2, b2) != c2)
      {

        neurona.setPeso_1(peso_1_anterior + 0.2f * (a1 - neurona.salida(a2, b2)) * b1);   // 0 1
        neurona.setPeso_2(peso_2_anterior + 0.2f * (a0 - neurona.salida(a2, b2)) * a0);  // 0 0
        neurona.setbios(bios_anterior + 0.2f * (a0 - neurona.salida(a2, b2)));   // 0
        condicion = 1;
      }
      if (neurona.salida(a1, b1) != c1)
      {

        neurona.setPeso_1(peso_1_anterior + 0.2f * (a0 - neurona.salida(a1, b1)) * b0); //0 0
        neurona.setPeso_2(peso_2_anterior + 0.2f * (a1 - neurona.salida(a1, b1)) * b1); // 0 1
        neurona.setbios(bios_anterior + 0.2f * (a0 - neurona.salida(a1, b1)));          //0
        condicion = 1;
      }
      if (neurona.salida(a0, b0) != c0)
      {

        neurona.setPeso_1(peso_1_anterior + 0.2f * (a0 - neurona.salida(a0, b0)) * b0);   // 0 0
        neurona.setPeso_2(peso_2_anterior + 0.2f * (a0 - neurona.salida(a0, b0)) * b0);   //0 0
        neurona.setbios(bios_anterior + 0.2f * (a0 - neurona.salida(a0, b0)));           //0
        condicion = 1;
      }

      
  
      }



    if (((neurona.salida(a3, b3)) == c3) && ((neurona.salida(a2, b2)) == c2) && ((neurona.salida(a1, b1)) == c1) && ((neurona.salida(a0, b0)) == c0))
    {

      printf("INICIATE EXECUTION?\n");
      scanf("%d", &execute);

      
      if (execute == 1) {

        while (execute == 1) {
          printf("\n");
          printf("input Data  ");
          scanf("%d", &input1);
          scanf("%d", &input2);
          printf("\n");

          if (input1 == a0 && input2 == b0) {

            printf("A:%d B:%d  :%d \n", a0, b0, new_c0);


          }

          if (input1 == a1 && input2 == b1) {

            printf("A:%d B:%d  :%d \n", a1, b1, new_c1);
          }


          if (input1 == a2 && input2 == b2) {

            printf("A:%d B:%d  :%d \n", a2, b2, new_c2);
          }


          if (input1 == a3 && input2 == b3) {

            printf("A:%d B:%d  :%d \n", a3, b3, new_c3);
          }



                         printf("INICIATE EXECUTION?\n  ");
                 scanf("%d", &execute);



        }
        //cout << endl;

        
      }


    }//while CONDICION

  }// while learning
                              //cout << endl;
  } //END INFINITE WHILE

//} // END MAIN PROGRAM



